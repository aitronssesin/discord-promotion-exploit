import requests
import random
import os

# Custom ASCII art
ascii_art = """
  _____  _                       _   _____                           _   _               
 |  __ \(_)                     | | |  __ \                         | | (_)             
 | |  | |_ ___  ___ ___  _ __ __| | | |__) | __ ___  _ __ ___   ___ | |_ _  ___  _ __   
 | |  | | / __|/ __/ _ \| '__/ _` | |  ___/ '__/ _ \| '_ ` _ \ / _ \| __| |/ _ \| '_ \  
 | |__| | \__ \ (_| (_) | | | (_| | | |   | | | (_) | | | | | | (_) | |_| | (_) | | | |  
 |_____/|_|___/\___\___/|_|  \__,_| |_|   |_|  \___/|_| |_| |_|\___/ \__|_|\___/|_| |_| 
                                                                                                                 
                                                                                                                                  
"""
os.system("cls")

# Print ASCII art
print(ascii_art)

# API request URL
url = 'https://api.discord.gx.games/v1/direct-fulfillment'

# File storing generated URLs
urls_file = 'urls.txt'

# Read the last number from the file if it exists
try:
    with open(urls_file, 'r') as file:
        lines = file.readlines()
        if lines:
            last_url_number = int(lines[-1].split(':')[0])
        else:
            last_url_number = 0
except FileNotFoundError:
    last_url_number = 0

# Request headers
headers = {
    'authority': 'api.discord.gx.games',
    'accept': '*/*',
    'accept-language': 'es-ES,es;q=0.9',
    'content-type': 'application/json',
    'origin': 'https://www.opera.com',
    'referer': 'https://www.opera.com/',
    'sec-ch-ua': '"Opera GX";v="105", "Chromium";v="119", "Not?A_Brand";v="24"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 OPR/105.0.0.0'
}

# Request data in JSON format
data = {
    'partnerUserId': '77156cf8d8fd41ec894b8498239a9fca4d8351ac43f135387f2eeebd9e63ec7b'
}

# URL of the proxy file
proxy_file_url = 'https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt'

# Get the list of proxies from the file
response_proxies = requests.get(proxy_file_url)
proxies = response_proxies.text.split('\n')

# Filter valid proxies (you can adjust as needed)
valid_proxies = [proxy.strip() for proxy in proxies if ':' in proxy]

# Ask the user for the number of URLs to generate
num_urls = int(input('Enter the number of URLs you want to generate: '))

# Counter for generated URLs
url_count = 0

# List to store generated URLs
generated_urls = []

# List to store URLs with errors
error_urls = []

# Loop to make requests until the desired number is reached
while url_count < num_urls:
    # Calculate the current URL number
    current_url_number = last_url_number + url_count + 1

    # Select a random proxy from the list
    selected_proxy = {'http': 'http://' + random.choice(valid_proxies)}

    try:
        # Make the POST request using the selected proxy
        response = requests.post(url, headers=headers, json=data, proxies=selected_proxy, timeout=5)

        # Check if the request was successful
        if response.status_code == 200:
            # Get the token from the JSON response
            token = response.json().get('token')

            # Build the URL with the token
            billing_url = f'https://discord.com/billing/partner-promotions/1180231712274387115/{token}'

            # Print and add the generated URL to the list
            generated_url = f'{current_url_number}: {billing_url}'
            print(generated_url)
            generated_urls.append(generated_url)

            # Increment the counter
            url_count += 1

            # Save the generated URL to the file in real-time
            with open(urls_file, 'a') as file:
                file.write(generated_url + '\n')

        else:
            # Print and add the error URL to the list
            error_url = f'Error in request #{current_url_number}. Status code: {response.status_code}'
            print(error_url)
            error_urls.append(error_url)

    except Exception as e:
        # Print and add the error URL to the list in case of exception
        error_url = f'Error in request #{current_url_number}. Exception: {str(e)}'
        print(error_url)
        error_urls.append(error_url)

# Print the total number of generated URLs
print(f'Total generated URLs: {url_count}')

# Print URLs with errors
if error_urls:
    print('Errors:')
    for error_url in error_urls:
        print(error_url)
